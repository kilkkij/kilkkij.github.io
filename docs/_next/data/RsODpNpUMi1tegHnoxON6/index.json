{"pageProps":{"data":{"title":"Juho Kilkki","links":[{"name":"LinkedIn","url":"https://www.linkedin.com/in/juho-k-712468144/"},{"name":"GitHub","url":"https://github.com/kilkkij"},{"name":"Kaggle","url":"https://www.kaggle.com/kilkki/code"},{"name":"ResearchGate","url":"https://www.researchgate.net/profile/Juho-Kilkki"}],"summary":"Software engineer with a background in physics","mail":"juho.kilkki@gmail.com","location":"Helsinki, Finland","sections":[{"header":"Experience","elements":[{"header":"Foreca","dates":["August 2019",""],"role":"Software Designer","content":["Built and maintained corporate and consumer products and internal tools","Developed software for data fetching and utilization","Implemented statistical data quality control"]},{"header":"Accenture Technology","dates":["Feb 2018","Aug 2019"],"role":"Associate Software Engineering / Application Development Analyst / Application Development Senior Analyst","content":["Developed Java back-end services for customer management and financial calculation","Implemented configurable software that enabled GDPR-compliant testing of services"]},{"header":"Finnish Meteorological Institute","dates":["October 2012","December 2017"],"role":"Master's thesis writer / PhD Student","content":["Research at greenhouse gases research group","Reported on greenhouse gas observations and modeled their flow, using numerical transport models and tools such as Python, NumPy and Stan."]}]},{"header":"Technical experience","elements":[{"header":"Programming languages and tools","content":["Programming languages: Python, Javascript, Java, SQL","Programming languages (some familiarity): R, C, C#, PHP, Perl, HTML, CSS","Tools and frameworks: React, Next.js, Spring, Saltstack","Data processing: NumPy, SciPy, Stan","Storage: SQL Server, MariaDB, PostgreSQL"]}]},{"header":"Projects","elements":[{"header":"Linear de-blur","content":["Tool for recovering from a shaken photo, with some assumptions."],"hidden_content":"Linear de-blur here means that the model assumes that the shaking is equivalent to applying a convolution with a kernel that consists of a single line segment. That is probably a reasonable assumption, but it turns out, of course, that running gradient descent every time is not very performant. You should use a CNN solution instead, even though it cheats (it sort of makes stuff up).","link":"https://github.com/kilkkij/line-deblur","picture":"bike.png"},{"header":"NumPy neural net","content":["A simple layered neural net implementation in NumPy, with gradient descent."],"hidden_content":"Because why not? If you can't implement something, you don't understand it. â€“ Someone famous","link":"https://github.com/kilkkij/numpynet"}]},{"header":"Education","elements":[{"header":"Helsinki University","dates":["2016","2017"],"role":"PhD student in meteorology","content":["Courses in, among others, atmospheric physics and inverse modeling. No degree received."]},{"header":"Helsinki University","dates":["2013","2015"],"role":"Master's degree in meteorology","content":["Focus on physical and dynamic meteorology, with several courses in programming and data analysis."]}]}]}},"__N_SSG":true}